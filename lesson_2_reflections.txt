What happens when you initialize a repository? Why do you need to do it?

>The folder you are in becomes git enabled. Now you can make commits and manage versions of that folder. If you don't git init, you can't commit, log, status, checkout, etc.

How is the staging area different from the working directory and the repository? What value do you think it offers?

>Working directory is where the files exist. Repository is created in working directory. The staging area is part of the repository, or in between the working directory and the repository. File changes are added to the staging area to allow precision when committing to the repository.

How can you use the staging area to make sure you have one commit per logical change?

>run git status to see which modified files are in the staging area. Before commiting, run git diff --staged to see how the content in the staging area differs from the latest commit in the repository. This allows you to know precisely what logical changes are going to be made in the next commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

>Branches are helpful when creating new versions of a project or experimenting with features. This is helpful when you want to try new stuff out without affecting the main master branch of code. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

How do the diagrams help you visualize the branch structure?

They allow you to see the relationships between commits and their parents, which clarifies which commits belong to a branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

>Commits from one branch are appended to master branch from the latests shared commit. Representing this in a diagram helps us be aware of which commits and branches are/are not included in the master branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

>Automatic merging is quick and easy. Its also reasonably safe since Git will alert you if there are conflicts that you need to resolve. However the con is that more mistakes can happen in the merge. Merging manually gives you full control of the merge. The con is that it is a lot more work.